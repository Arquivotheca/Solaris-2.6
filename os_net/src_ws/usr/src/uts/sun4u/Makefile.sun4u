#
# uts/sun4u/Makefile.sun4u
# Copyright (c) 1994, 1995, 1996 by Sun Microsystems, Inc.
# All rights reserved.
#
#ident	"@(#)Makefile.sun4u	1.58	96/10/15 SMI"
#
#	This makefile contains the common definitions for the sun4u unix
#	and all sun4u implementation architecture dependent modules.
#

#
#	Machine type (implementation architecture):
#
PLATFORM	 = sun4u
PROMIF		 = ieee1275
PSMBASE		 = $(UTSBASE)/../psm

#
# Definitions for the platform-specific /platform directories.
#
PLATFORMS		 = SUNW,Ultra-1
PLATFORMS		+= SUNW,Ultra-2
PLATFORMS		+= SUNW,Ultra-4
PLATFORMS		+= SUNW,Ultra-Enterprise

ROOT_PLAT_DIRS		= $(PLATFORMS:%=$(ROOT_PLAT_DIR)/%)
USR_PLAT_DIRS		= $(PLATFORMS:%=$(USR_PLAT_DIR)/%)

ROOT_SUNFIRE_DIR	= $(ROOT_PLAT_DIR)/SUNW,Ultra-Enterprise
ROOT_SUNFIRE_MOD_DIR	= $(ROOT_SUNFIRE_DIR)/kernel
ROOT_SUNFIRE_MISC_DIR	= $(ROOT_SUNFIRE_MOD_DIR)/misc

ROOT_TAZMO_DIR		= $(ROOT_PLAT_DIR)/SUNW,Ultra-4
ROOT_TAZMO_MOD_DIR	= $(ROOT_TAZMO_DIR)/kernel
ROOT_TAZMO_MISC_DIR	= $(ROOT_TAZMO_MOD_DIR)/misc

ROOT_PLAT_MOD_DIRS	= $(ROOT_SUNFIRE_MOD_DIR) $(ROOT_TAZMO_MOD_DIR)
ROOT_PLAT_MISC_DIRS	= $(ROOT_SUNFIRE_MISC_DIR) $(ROOT_TAZMO_MISC_DIR)

#
# Welcome to SPARC V9.
#

#
#	Everybody needs to know how to build modstubs.o and to locate unix.o
#
OBJS_DIR	 = .
UNIX_DIR	 = $(UTSBASE)/$(PLATFORM)/unix
GENLIB_DIR	 = $(UTSBASE)/$(PLATFORM)/genunix
MODSTUBS_DIR	 = $(UNIX_DIR)
DSF_DIR		 = $(UTSBASE)/$(PLATFORM)/genassym
LINTS_DIR	 = $(OBJS_DIR)
LINT_LIB_DIR	 = $(UTSBASE)/$(PLATFORM)/lint-libs

UNIX_O		 = $(UNIX_DIR)/unix.o
MODSTUBS_O	 = $(MODSTUBS_DIR)/modstubs.o
GENLIB	 	 = $(GENLIB_DIR)/libgenunix.so
LINT_LIB	 = $(LINT_LIB_DIR)/llib-lunix.ln

#
#	cpu and platform modules need to know how to build their own symcheck module
#
PLATMOD		 = platmod
PLATLIB		 = $(PLAT_DIR)/libplatmod.so

CPUNAME		 = cpu
CPULIB		 = $(CPU_DIR)/libcpu.so

SYM_MOD		 = unix.sym

#
#	Include the makefiles which define build rule templates, the
#	collection of files per module, and a few specific flags. Note
#	that order is significant, just as with an include path. The
#	first build rule template which matches the files name will be
#	used. By including these in order from most machine dependent
#	to most machine independent, we allow a machine dependent file
#	to be used in preference over a machine independent version
#	(Such as a machine specific optimization, which preserves the
#	interfaces.)
#
include $(UTSBASE)/$(PLATFORM)/Makefile.files
include $(UTSBASE)/sfmmu/Makefile.files
include $(UTSBASE)/sparc/v9/Makefile.files
include $(UTSBASE)/sparc/Makefile.files
include $(UTSBASE)/sun/Makefile.files
include $(SRC)/psm/promif/$(PROMIF)/common/Makefile.files
include $(SRC)/psm/promif/$(PROMIF)/$(PLATFORM)/Makefile.files
include $(UTSBASE)/common/Makefile.files

#
#	Include machine independent rules. Note that this does not imply
#	that the resulting module from rules in Makefile.uts is	machine
#	independent. Only that the build rules are machine independent.
#
include $(UTSBASE)/Makefile.uts

#
#	machine specific optimization, override default in Makefile.master
#

CFLAGS		= -O -xcg92
CFLAGS		+= $(EXTRA_CFLAGS)
CFLAGS		+= $(XAOPT)
CFLAGS		+= $(INLINES)
CFLAGS		+= $(CCMODE)
ASFLAGS		+= -xarch=v8plusa

#
#	The following must be defined for all implementations:
#
#	MAPFILE:	ld mapfile for the build of kernel/unix.
#	MODSTUBS:	Module stubs source file.
#	GENASSYM_SRC:	genassym.c
#	FDGENASSYM_SRC: fd_genassym.c
#
MAPFILE		 = $(UTSBASE)/$(PLATFORM)/conf/Mapfile
MODSTUBS	 = $(UTSBASE)/sparc/ml/modstubs.s
GENASSYM_SRC	 = $(UTSBASE)/$(PLATFORM)/ml/genassym.c
FDGENASSYM_SRC 	 = $(UTSBASE)/sun/io/fd_genassym.c

#
#	Define the actual specific platforms
#
MACHINE_DEFS	 = -D$(PLATFORM) -D_MACHDEP -DSFMMU -DMP -D__sparcv9cpu

$(MPSAS_BUILD)MACHINE_DEFS	+= -DMPSAS

#
#	Software workarounds for hardware "features"
#

include $(UTSBASE)/sun4u/Makefile.workarounds

#
#	Debugging level
#
#	Special knowledge of which special debugging options effect which
#	file is used to optimize the build if these flags are changed.
#
#	XXX: The above could possibly be done for more flags and files, but
#	     is left as an experiment to the interested reader. Be forewarned,
#	     that excessive use could lead to maintenance difficulties.
#
#	Note: kslice can be enabled for the sun4u, but is disabled by default
#	      in all cases.
#
DEBUG_DEFS	=
$(NOT_RELEASE_BUILD)DEBUG_DEFS	= -DDEBUG

$(NOT_RELEASE_BUILD)trap.o	:=	DEBUG_DEFS	+= -DTRAPDEBUG
$(NOT_RELEASE_BUILD)syscall_trap.o :=	DEBUG_DEFS	+= -DSYSCALLTRACE
$(NOT_RELEASE_BUILD)locore.o	:=	DEBUG_DEFS	+= -DSNOOPING
$(NOT_RELEASE_BUILD)clock.o	:=	DEBUG_DEFS	+= -DKSLICE=0

# comment this out for a "release" kernel with TRAPTRACE
NOT_TRAPTRACE_BUILD = $(NOT_RELEASE_BUILD)

$(NOT_TRAPTRACE_BUILD)locore.o	:=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)mlsetup.o	:=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)syscall_trap.o :=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)startup.o :=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)mp_startup.o :=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)machdep.o	:=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)interrupt.o :=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)sfmmu_asm.o:=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)trap_table.o:=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)xc.o	:=	DEBUG_DEFS	+= -DTRAPTRACE
$(NOT_TRAPTRACE_BUILD)wbuf.o	:=	DEBUG_DEFS	+= -DTRAPTRACE

# Comment these out if you don't want dispatcher lock statistics.

#$(NOT_RELEASE_BUILD)lock_prim.o	:= DEBUG_DEFS	+= -DDISP_LOCK_STATS
#$(NOT_RELEASE_BUILD)disp.o	:= DEBUG_DEFS	+= -DDISP_LOCK_STATS

# Comment these out if you don't want dispatcher debugging 

#$(NOT_RELEASE_BUILD)lock_prim.o	:= DEBUG_DEFS	+= -DDISP_DEBUG

#
#	Build `options'. These are mostly historical and the need for these
#	is largely removed by the module technology. However, the static
#	build will continue to require these.
#
OPTION_DEFS	 = -DSYSACCT -DC2_AUDIT -DQUOTA

#
#	Collect the preprocessor definitions to be associated with *all*
#	files.
#
ALL_DEFS	 = $(MACHINE_DEFS) $(WORKAROUND_DEFS) $(DEBUG_DEFS) \
		   $(OPTION_DEFS)
GENASSYM_DEFS	 = $(MACHINE_DEFS) $(OPTION_DEFS)

#
# ----- TRANSITIONAL SECTION --------------------------------------------------
#

#
#	Not everything which *should* be a module is a module yet. The
#	following is a list of such objects which are currently part of
#	the base kernel but should soon become kmods.
#
MACH_NOT_YET_KMODS	 = $(AUTOCONF_OBJS)

#
# ----- END OF TRANSITIONAL SECTION -------------------------------------------
#

#
#	The kernels modules which are "implementation architecture"
#	specific for this machine are enumerated below. Note that most
#	of these modules must exist (in one form or another) for each
#	architecture.
#
#	Common Drivers (usually pseudo drivers) (/kernel/drv):
#

#
#	Machine Specific Driver Modules (/kernel/drv):
#
#	XXX: How many of these are really machine specific?
#
DRV_KMODS	+= bwtwo cgsix cgthree
DRV_KMODS	+= dma ledma fd
DRV_KMODS	+= rootnex sbusmem stc zs zsh
DRV_KMODS	+= sbus
DRV_KMODS	+= pci
DRV_KMODS	+= ebus
DRV_KMODS	+= su
DRV_KMODS       += tod

#
#	sun4u Server specific drivers
#
DRV_KMODS	+= central fhc envctrl environ sysctrl ac sram simmstat

#
#	Exec Class Modules (/kernel/exec):
#
EXEC_KMODS	+=

#
#	Scheduling Class Modules (/kernel/sched):
#
SCHED_KMODS	+=

#
#	File System Modules (/kernel/fs):
#
FS_KMODS	+=

#
#	Streams Modules (/kernel/strmod):
#
STRMOD_KMODS	+= kb

#
#	'System' Modules (/kernel/sys):
#
SYS_KMODS	+=

#
#	'User' Modules (/kernel/misc):
#
MISC_KMODS	+= obpsym consconfig bootdev vis cpr

#
#	Platform misc modules
#
PLAT_KMODS	+= default sunfire tazmo

#	'User' "Modules" excluded from the Full Kernel lint target:
#
NLMISC_KMODS	+= forthdebug

#
#	Modules eXcluded from the product:
#
XMODS		+=

#
#
#	The following aren't really modules, but just support the
#	installation of a platform specific .conf file.
CONFS		+= profile

#
#	cpu modules
#
CPU_KMODS	+= spitfire
