#
# Copyright (c) 1992-1996, by Sun Microsystems, Inc.
# All rights reserved.
#
#pragma ident	"@(#)Makefile.sparc	1.69	96/09/12 SMI"
#
# uts/sparc/Makefile.sparc
#
#	This makefile contains the common definitions for all sparc
#	implementation architecture independent modules.
#

#
#	Everybody needs to know how to build modstubs.o and to locate unix.o.
#	Note that unix.o must currently be selected from among the possible
#	"implementation architectures". Note further, that unix.o is only
#	used as an optional error check for undefines so (theoretically)
#	any "implementation architectures" could be used. We choose sun4m
#	because it is the reference port.
#
OBJS_DIR	 = .
UNIX_DIR	 = $(UTSBASE)/sun4m/unix
GENLIB_DIR	 = $(UTSBASE)/sparc/genunix
MODSTUBS_DIR	 = $(UNIX_DIR)
DSF_DIR		 = $(UNIX_DIR)
LINTS_DIR	 = $(OBJS_DIR)
LINT_LIB_DIR	 = $(UTSBASE)/sparc/lint-libs

UNIX_O		 = $(UNIX_DIR)/unix.o
GENLIB		 = $(GENLIB_DIR)/libgenunix.so
MODSTUBS_O	 = $(MODSTUBS_DIR)/modstubs.o
LINT_LIB	 = $(UTSBASE)/sun4m/lint-libs/llib-lunix.ln
GEN_LINT_LIB	 = $(LINT_LIB_DIR)/llib-lgenunix.ln

#
#	Include the makefiles which define build rule templates, the
#	collection of files per module, and a few specific flags. Note
#	that order is significant, just as with an include path. The
#	first build rule template which matches the files name will be
#	used. By including these in order from most machine dependent
#	to most machine independent, we allow a machine dependent file
#	to be used in preference over a machine independent version
#	(Such as a machine specific optimization, which preserves the
#	interfaces.)
#
include $(UTSBASE)/sparc/Makefile.files
include $(UTSBASE)/sun/Makefile.files
include $(UTSBASE)/common/Makefile.files

#
#	Include machine independent rules. Note that this does not imply
#	that the resulting module from rules in Makefile.uts is	machine
#	independent. Only that the build rules are machine independent.
#
include $(UTSBASE)/Makefile.uts

#
#	The following must be defined for all implementations:
#
#	MODSTUBS:	Module stubs source file.
#
MODSTUBS	 = $(UTSBASE)/sparc/ml/modstubs.s

#
#	Private assym-like file generators
#
AUDIOGENASSYM_SRC = $(UTSBASE)/sun/io/audio_genassym.c

#
#	Define the actual specific platforms - obviously none.
#
MACHINE_DEFS	 = 

#
#	Debugging level
#
#	Special knowledge of which special debugging options effect which
#	file is used to optimize the build if these flags are changed.
#
#	XXX: The above could possibly be done for more flags and files, but
#	     is left as an experiment to the interested reader. Be forewarned,
#	     that excessive use could lead to maintenance difficulties.
#
DEBUG_DEFS	=
$(NOT_RELEASE_BUILD)DEBUG_DEFS	+= -DDEBUG
#$(NOT_RELEASE_BUILD)DEBUG_DEFS	+= -DDEBUG -DAUDIOTRACE

$(NOT_RELEASE_BUILD)syscall.o	:=	DEBUG_DEFS	+= -DSYSCALLTRACE
$(NOT_RELEASE_BUILD)clock.o	:=	DEBUG_DEFS	+= -DKSLICE=1

# Comment these out if you don't want dispatcher lock statistics.

# $(NOT_RELEASE_BUILD)disp_lock.o	:= DEBUG_DEFS	+= -DDISP_LOCK_STATS

#
#	Build `options'. These are mostly historical and the need for these
#	is largely removed by the module technology. However, the static
#	build will continue to require these.
#
OPTION_DEFS	 = -DSYSACCT -DC2_AUDIT -DQUOTA

#
#	Collect the preprocessor definitions to be associated with *all*
#	files.
#
ALL_DEFS	 = $(MACHINE_DEFS) $(DEBUG_DEFS) $(OPTION_DEFS)
#
# ----- TRANSITIONAL SECTION --------------------------------------------------
#

#
#	Not everything which *should* be a module is a module yet. The
#	following is a list of such objects which are currently part of
#	the base kernel but should soon become kmods.
#
NOT_YET_KMODS	 = $(OLDPTY_OBJS) $(PTY_OBJS) $(MOD_OBJS)

#
# ----- END OF TRANSITIONAL SECTION -------------------------------------------

#
#	The kernels modules which are "implementation architecture"
#	specific for this machine are enumerated below. Note that most
#	of these modules must exist (in one form or another) for each
#	architecture.
#
#	Common Drivers (usually pseudo drivers) (/kernel/drv):
#
DRV_KMODS	+= arp clone cn conskbd consms dump glm icmp
DRV_KMODS	+= ip ipd ipdcm ipdptp isp iwscn kstat ksyms llc1 log mm
DRV_KMODS	+= pm profile pseudo ptc ptm pts ptsl ramdisk sad se sp sy
DRV_KMODS	+= tcp tl tnf udp vol winlock wc logindmux rts

#
#	Machine Specific Driver Modules (/kernel/drv):
#
DRV_KMODS	+= audio audiocs be bpp dbri esp fas le lebuffer pci_pci
DRV_KMODS	+= openeepr options qe qec hme sd st xbox
DRV_KMODS	+= soc pln ssd
DRV_KMODS	+= ecpp

#
# PCMCIA specific module(s)
#
DRV_KMODS	+= pem stp4020 pcs
MISC_KMODS	+= cis cs pcmcia pcalloc
#
#	Exec Class Modules (/kernel/exec):
#
EXEC_KMODS	+= aoutexec elfexec intpexec

#
#	Scheduling Class Modules (/kernel/sched):
#
SCHED_KMODS	+= RT TS RT_DPTBL TS_DPTBL IA

#
#	File System Modules (/kernel/fs):
#
FS_KMODS	+= fdfs fifofs hsfs lofs namefs nfs pcfs tmpfs
FS_KMODS	+= specfs ufs autofs cachefs procfs sockfs

#
#	Streams Modules (/kernel/strmod):
#
STRMOD_KMODS	+= bufmod connld dedump ldterm ms pckt pfmod pipemod
STRMOD_KMODS	+= ptem ppp ppp_diag redirmod timod tirdwr ttcompat
STRMOD_KMODS	+= rpcmod rlmod telmod

#
#	'System' Modules (/kernel/sys):
#
SYS_KMODS	+= c2audit inst_sync kaio msgsys semsys shmsys sysacct pipe
SYS_KMODS	+= doorfs pset

#
#	'User' Modules (/kernel/misc):
#
MISC_KMODS	+= consconfig des diaudio ipc nfs_dlboot nfssrv scsi seg_drv
MISC_KMODS	+= strplumb swapgeneric klmmod klmops tlimod seg_mapdev
MISC_KMODS	+= krtld
MISC_KMODS	+= rpcsec rpcsec_gss

#
#	generic-unix module (/kernel/genunix):
#
GENUNIX_KMODS	+= genunix

#
#	SVVS Testing Modules (/kernel/strmod):
#
#	These are streams and driver modules which are not to be
#	delivered with a released system. However, during development
#	it is convenient to build and install the SVVS kernel modules.
#
SVVS_KMODS	+= lmodb lmode lmodr lmodt lo tidg tivc tmux

SVVS		+= svvs

#
#	Modules eXcluded from the product:
#
XMODS		+= wsdrv
